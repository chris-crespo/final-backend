;;;; methods.import.scm - GENERATED BY CHICKEN 5.2.0 -*- Scheme -*-

(##sys#with-environment
  (lambda ()
    (scheme#eval
      '(import-syntax
         scheme
         chicken.io
         chicken.syntax
         awful
         spiffy
         spiffy-request-vars
         medea
         intarweb))
    (##sys#register-compiled-module
      'methods
      'methods
      (scheme#list)
      '((json-request-vars . methods#json-request-vars)
        (request-var . methods#request-var)
        (json-response . methods#json-response))
      (scheme#list
        (scheme#cons
          'post
          (syntax-rules
            ()
            ((_ route (var . vars) expr . rest)
             (define-route route 'POST (var . vars) expr . rest))))
        (scheme#cons
          'get
          (syntax-rules
            ()
            ((_ route (var . vars) expr . rest)
             (define-route route 'GET (var . vars) expr . rest)))))
      (scheme#list
        (scheme#cons
          'define-route
          (syntax-rules
            ()
            ((_ route method (var . vars) expr . rest)
             (define-page
               route
               (lambda ()
                 (awful-response-headers '((content-type "application/json")))
                 (with-json-request-vars
                   (var . vars)
                   (json-response (begin expr . rest))))
               #:no-template
               #t
               #:method
               `(,method)))))
        (scheme#cons
          'with-json-request-vars
          (syntax-rules
            ()
            ((_ (var ...) expr . rest)
             (let ((request-vars (json-request-vars)))
               (let ((var (request-var 'var request-vars)) ...)
                 (begin expr . rest))))))
        (scheme#cons
          'debug-macro
          (syntax-rules () ((_ macro) (print (strip-syntax (expand 'macro))))))
        (scheme#cons
          'define-syntax-rule
          (syntax-rules
            ()
            ((_ (name . rest-of-pattern) expr . rest)
             (define-syntax
               name
               (syntax-rules () ((name . rest-of-pattern) expr . rest))))))))))

;; END OF FILE
